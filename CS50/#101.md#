# Basics of C programming
--------------------------

## Intro
C is a rather old language but a lot of the new ones are based on it and it runs a lot of everyday things. 
A file in C will have a .c extension.

    #include <stdio.h>

    int main(void)
    {
        printf("hello, world/n");
    }

This code is not super readable, which is the reason why more abstract languages like python have been developed. 

C is a rather low level programming languages. 
A user writes a 'source code' but a computer can only read 'machine code'. This is why the need for a compiler, ora the translation step. C is a 'compiled language'.


From a .c file in VSCode we can run make <file_name> and then ./<file_name>
to execute the program.

'make' creates a binary, compiled program into the direcotry where the .c file is and makes it executable. 

make is not the compiler. It actually just looks for an available compiler based on the file extension. 

    printf()  
    
is useful to print a string

    string answer = get_string('question');
    printf("Hello, %s, answer);

is useful to prompt a user ans ave the result to a variable 'answer'; it is only available in the cs50.h lib. Note the %s is a formatter stand-in which "waits" for the variable to fill in that is defined later in the function call.

Here, having created a variable, in C it is required to first assign a type to it. This type will stay consistent thoughout the program. This is called 'Statically Assigned Typing'

Because %s expects any variable, the code above could be compacted as 
    
    printf("Hello, %s\n", get_string("What's your name?\n"));

This is more compact but not necessarily better. It is less readeable.

Basically any c program will be wrapped by 
    
    #include <stdio.h>

    int main(void)
    {

    }

the #include section tells the compiler which libraries to look up to find the required functions. stdio is the library, stdio.h is its header file, which is read by the compiler. 

c has 

    bool
    char        %c
    double      
    float       %f
    int         %i
    long  
    strig       %s

as the most common data types.
'const' can be written before the data type to be assigned to make it completely static thoughout the  program. It is good practice to then have the variable name capitalized.

cs50 has
    
    get_char
    get_<data_types>
    .
    .

Math operators are 

    + - * / %

Where % is the "remainder" operator.

Comments in C are formatted as //your_comment

With the cs50 we can easily write a calculator program. If we experiment a little bit with it. If we ask for 2B + 2B, we get a wrong result. This is due to the fact that the codespace has 32bit to allocate to a int variable. That's 2^32 which is about 4B for positive and negative numbers. We need a 'long' data type. Thats a stopgap solution as the bits allocated are still finite. 

It is also worth noting that a rounding will always be applied even for a long float number. 

An 'if' statement in C is formatted as 

    if (logical condition)
    {
        action if condition is met
    }

The logical condition can be checked for ints, chars and bool anything you like. 

NB ' ' is used for char, " " is used for strings. 

'While' loops can be implented as 

    while (logical condition is true)
    {
        action to be repeated
    }

an ethernal While can be set as 

    while(true)

or

    while(1)

We can set a limit like this 

    int i = 0;
    while (i<3)
    {
        action;
        if (arbitrary condition)
        {
            i++;
        }
    }

this loop only steps forward if we want it to.

'For' can be implemented as 

    for (i = 1; i<5; i++)
    {
        action;
    }

Because the counter for the for loop was created within it, that's its only scope.

## Functions

To create a function, a return type, name and input must be stated. 

    void meow(void)
        {
            printf("Meow \n");
        }
    
    meow();

calling meow() within the code prints "Meow";

functions must be defined between int main(void) but in order to make them available at any point of the program, we can call their prototype before it. 

The function definition must be outside the main program.
See ~/Documents/CS50_exercises/meow.c for info.

